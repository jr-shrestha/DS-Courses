library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn = getSymbols("AMZN",auto.assign=FALSE)
View(amzn)
amzn <- read.table(amazn, row.names = FALSE)
amzn <- read.table(amzn, row.names = FALSE)
amzn <- read.table(amzn)
amzn <- read.matrix(amzn)
amzn <- matrix(amzn)
View(amzn)
amzn = getSymbols("AMZN",auto.assign=FALSE, row.names=FALSE)
View(amzn)
amzn2 <- read.frame(amzn, row.names = FALSE)
amzn2 <- data.frame(amzn, row.names = FALSE)
amzn2 <- data.frame(amzn, row.names = NULL)
View(amzn2)
amzn = getSymbols("AMZN",auto.assign=FALSE, row.names=NULL)
View(amzn)
amzn$Row.NAmes
amzn$Row.Names
View(amzn)
amzn$row.names
amzn$1
amzn$1
amzn
amzn[1]
rw <- rnames(amzn)
rw <- rname(amzn)
amzn2 <- rownames(amzn, do.NULL = TRUE, prefix = "row")
amzn2 <- rownames(amzn, do.NULL = FALSE, prefix = "row")
amzn2 <- rownames(amzn)
View(amzn)
amzn2 <- colnames(amzn)
amzn2 <- rownames(amzn)
amzn
amzn2
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn2 <- rownames(amzn)
dbinom
dbinom(0,3,02)
dbinom(0,3,0.2)
dbinom(1,3,0.2)
dbinom(3,3,0.2)
dbinom(1:3,3,0.2)
dbinom(1,3,0.1)
dbinom(0,3,0.1)
x<- c(40, 60, 72, 77, 89, 96, 111, 116, 124, 132, 140, 268, 320, 369, 723, 745, 771, 792, 983, 1403, 1784, 2188, 7453, 12486, 19271)
mean(x)
median(x)
summary(x)
sd(x)
sd(x)/sqrt(25)
2*sd(x)/sqrt(25)
mean(x) - 2*sd(x)/sqrt(25)
mean(x) + 2*sd(x)/sqrt(25)
(15287-1284) -2*((15287-1284)/sqrt((1903^2/25)+(29338^2/25)))
2*((15287-1284)/sqrt((1903^2/25)+(29338^2/25)))
2*(sqrt((1903^2/25)+(29338^2/25)))
(15287-1284)-2*(sqrt((1903^2/25)+(29338^2/25)))
(15287-1284)+2*(sqrt((1903^2/25)+(29338^2/25)))
sum(dbnom(7:8,8,0.5))
sum(dbinom(7:8,8,0.5))
pbinom(6,8,.5,FALSE)
12 - 1.96 * 4 / sqrt(100)
round(12 - 1.96 * 4 / sqrt(100),20
round(12 - 1.96 * 4 / sqrt(100),2
round(12 - 1.96 * 4 / sqrt(100),2)
round(3 - 1.96 * 1.1 / sqrt(100),2)
1.1 / sqrt(100),2)
1.1 / sqrt(100)
qnorm,(1,96,3,1.1)
qnorm(1,96,3,1.1)
qnorm(1.96,3,1.1)
pnorm(1.96,3,1.1)
3-pnorm(1.96,3,1.1)
3-2*(pnorm(1.96,3,1.1))
round(3 - 1.96 * 1.1 / sqrt(100),2)
3-pnorm(1.96,3,.11)
3-2*pnorm(1.96,3,.11)
2*pnorm(1.96,3,.11)
qnorm(1.96,3,.11)
pnorm( 2, lower.tail=FALSE)
pnorm( 1.96, lower.tail=FALSE)
pnorm( 1.96)
qnorm( 0.95)
round(3 - 1.96 * 1.1 / sqrt(100),2)
2*round(1.644854 * 1.1 / sqrt(100),2)
3-2*round(1.644854 * 1.1 / sqrt(100),2)
round(12 - 1.96 * 4 / sqrt(100),2)
x<- c(140,
138,
150,
148,
135,
)
x<- c(140,
138,
150,
148,
135
)
y <- c(132,
135,
151,
146,
130
)
mean(x)
mean(y)
sd(x)
se<- sqrt(sd(x)^2/5 + sd(y)^2/5)
se
1.96*se
(mean(x)-mean(y))/se
qnorm(0.6748902)
t.test(x, y, alternative = "two.sided", paired = T)
2*qnorm(0.6748902)
30/sqrt(9)
1.96*30/sqrt(9)
1100-1.96*30/sqrt(9)
1100-1.96*30/sqrt(9),1.96*30/sqrt(9)+1100
1100-1.96*30/sqrt(9), 1.96*30/sqrt(9)+1100
1100-1.96*30/sqrt(9); 1.96*30/sqrt(9)+1100
pbinom(2, prob = .5, size = 4, lower.tail = FALSE
)
dbinom(3,4,.5)
sum(dbinom(3:4,4,.5)
sum(dbinom(3:4,4,.5))
10/1787
10/1787*100
ppois(0,0.56, lower.tail=F)
ppois(1,0.56, lower.tail=F)
ppois(0,0.56, lower.tail=F)
ppois(10,17.87,lower.tail=TRUE)
ppois(10, 17.87, lower.tail=TRUE)
?qt
((-3-1))
((-3-1)/(sqrt(1.5^2/9)+sqrt(1.8^2/9))
((-3-1)/(sqrt(1.5^2/9)+sqrt(1.8^2/9)))
pt(-3.636364, 8, lower.tail=FALSE)
pt(-3.636364, 8)
2* pt(-3.636364, 8)
2* pt(-3.636364, 16)
power.t.test(power=.9, delta=.1, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(power=.9, delta=.01, sd=.04, type="one.sample", alt="one.sided")$n
power.t.test(n=100, delta=0.01, sd=0.04)$power
?power.t.test
power.t.test(n=100, delta=0.01, sd=0.04, type = "one.sample", alt = "one.sided", sig.level = 0.05)$power
((44-42.04)/sqrt((12^2/288)+(12^2/288)))
qnorm(1.96)
pnorm(1.96)
2*pnorm(1.96, lower.tail = FALSE)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("caret")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(testing)
View(testing)
View(training)
View(training)
View(testing)
plot(testing$CompressiveStrength)
str(plot)
?plot
View(training)
head(training)
View(training)
View(mixtures)
plot(mixtures$CompressiveStrength[inTrain]) # This produces a step pattern
plot(concrete$CompressiveStrength[inTrain], col=concrete$Age)
plot(concrete$CompressiveStrength[inTrain], col=concrete$FlyAsh)
plot(concrete$CompressiveStrength[inTrain], col=concrete$Age)
plot(concrete$CompressiveStrength[inTrain])
plot(concrete$CompressiveStrength[inTrain], col=concrete$Age)
summary(mixtures$SuperPlasticizer )
summary(mixtures$SuperPlasticizer)
summary(mixtures$Superplasticizer)
summary(log(mixtures$Superplasticizer)
summary(log(mixtures$Superplasticizer))
(log(mixtures$Superplasticizer))
barplot(log(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
hist((mixtures$Superplasticizer))
hist(log(mixtures$Superplasticizer+1))
hist((mixtures$Superplasticizer))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(predictors)
View(training)
preProcess(training)
preProcess(training, method="pca")
training[,11]
names(training[,11])
name(training[,11])
names(training)[,11]
names(training)[11]
names(training)[21]
names(training)[31]
names(training)[51]
names(training)[61]
names(training)[55]
names(training)[57]
names(training)[58]
names(training)[69]
preProcess(training[,58:69], method="pca")
?preProcess
preProcess(training[,58:69], method="pca", thresh=0.8)
preProcess(training[,58:69], method="pca", thresh=0.8, pcaComp=12)
preProcess(training[,58:69], method="pca", thresh=0.8)
pca7 <- preProcess(training[,58:69], method="pca", thresh=0.8)
pca7
trainPC <- predict(pca7)
trainPC <- predict(pca7, training)
pca7 <- preProcess(training[,58:69], method="pca", thresh=0.8, pcaComp=7)
pca7
trainPC <- predict(pca7, training)
trainPC <- predict(pca7, training[, 58:69])
modelFit <- train(training$diagnosis ~ ., method="glm",data=trainPC)
training$diagnosis
modelFit <- train(training$diagnosis ~ ., method="glm",data=trainPC)
modelFit
modelFit <- train(training$diagnosis ~ training[,58:69], method="glm",data=trainPC)
preProc <- preProcess(training[,58:69], method="pca", thresh=0.8)
trainPC <- predict(pca7, training[,58:69])
modelFit <- train(training$diagnosis ~., method="glm",data=trainPC)
testPC <- predict(preProc, training[,58:69])
training[,58:69]
modelFit <- train(training$diagnosis ~ training[,58:69], method="glm",data=trainPC)
modelFit <- train(training$diagnosis ~ training, method="glm",data=trainPC)
modelFit <- train(training$diagnosis ~ training$AXL, method="glm",data=trainPC)
install.packages("e1071")
library(e1071)
install.packages("caret",dependencies=TRUE)
install.packages("caret", dependencies = TRUE)
detach("package:caret", unload=TRUE)
install.packages("caret", dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library("slidify")
library("knirt")
library("knitr")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/first_deck")
slidify(index.Rmd)
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
y
plot(fit)
gestage = c(28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46)
y0 = c(4, 5, 9, 11, 13, 21, 29, 43, 38, 51, 76, 86, 73, 46, 38, 22, 11, 12, 7)
y1 = c(18, 32, 37, 31, 36, 35, 30, 44, 37, 41, 52, 60, 45, 27, 20, 17, 21, 6, 8)
odds = function(n0,n1) n1/n0
obsodds=sapply(1:length(y0), function(i) odds(y0[i],y1[i]))
plot(log(obsodds)~gestage)
abline(h=1,col="red")
obsodds
odds
