predict(model, sampleData)
View(sampleData)
View(sampleData)
table(training)
table(training$Class)
dim(training);dim(testing)
modFit<-train(Case~.,method="rpart", training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,CEX=0.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
test_set = subset(segmentationOriginal, Case == "Test");
train_set = subset(segmentationOriginal, Case == "Train");
dim(training);dim(testing)
modFit<-train(Case~.,method="rpart", training)
print(modFit$finalModel)
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
testing = subset(segmentationOriginal, Case == "Test");
training = subset(segmentationOriginal, Case == "Train");
dim(training);dim(testing)
modFit<-train(Case~.,method="rpart", training)
print(modFit$finalModel)
install.packages("rpart")
library("rpart", lib.loc="F:/Program Files/R/R-3.1.0/library")
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
testing = subset(segmentationOriginal, Case == "Test");
training = subset(segmentationOriginal, Case == "Train");
dim(training);dim(testing)
modFit<-train(Case~.,method="rpart", training)
print(modFit$finalModel)
modFit<-train(Case~.,method="rpart", training)
Case
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
modFit<-train(Case~.,method="rpart", training)
mydata<-segmentationOriginal
inTrain<-createDataPartition(y=mydata$Case,p=0.7,list=FALSE)
training<-mydata[inTrain,]
testing<-mydata[-inTrain,]
dim(training);dim(testing)
modFit<-train(Case~.,method="rpart", training)
dim(training);dim(testing)
modFit<-train(Case~.,method="rpart", training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,CEX=0.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
testing = subset(segmentationOriginal, Case == "Test");
training = subset(segmentationOriginal, Case == "Train");
set.seed(125)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
testing = subset(segmentationOriginal, Case == "Test");
training = subset(segmentationOriginal, Case == "Train");
dim(training);dim(testing)
modFit<-train(Case ~.,method="rpart", training)
modFit<-train(Class ~.,method="rpart", training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,CEX=0.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,CEX=0.8)
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
sampleData = training[1,]
sampleData[1,names(sampleData)] = rep(NA, length(names(sampleData)))
sampleData = rbind(sampleData, sampleData)
sampleData = rbind(sampleData, sampleData)
sampleData[1, c('TotalIntenCh1', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh1', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh1', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
predict(model, sampleData)
sampleData = training[1,]
sampleData[1,names(sampleData)] = rep(NA, length(names(sampleData)))
sampleData = rbind(sampleData, sampleData)
sampleData = rbind(sampleData, sampleData)
sampleData[1, c('TotalIntenCh1', 'FiberWidthCh1', 'PerimStatusCh1')] = c(23000, 10, 2)
sampleData[2, c('TotalIntenCh1', 'FiberWidthCh1', 'VarIntenCh4')] = c(50000, 10, 100)
sampleData[3, c('TotalIntenCh1', 'FiberWidthCh1', 'VarIntenCh4')] = c(57000, 8, 100)
sampleData[4, c('FiberWidthCh1', 'VarIntenCh4', 'PerimStatusCh1')] = c(8, 100, 2)
predict(modFit, sampleData)
print(modFit$finalModel)
predict(modFit,testing)
modFit <- train(Class~., data=training, method="rpart")
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
segmentationOriginal$Case
test1 <- subset (segmentationOriginal,segmentationOriginal$Case=='Test')
train1 <- subset (segmentationOriginal,segmentationOriginal$Case=='Train')
test1
head (test1)
set.seed (125)
head (train1)
modelFit1 <- train(Class ~. , method="rpart",data=train1)
modelFit1
summary (modelFit1)
m <- matrix(0, ncol = 3, nrow = 1)
m.df <- data.frame (m)
m.df
colnames(m.df) <- c("TotalIntench2","FiberWidthCh1","PerimStatusCh1")
m.df [1,] <- c (23000,10,2)
m.df
predict (modelFit1,m.df)
predict(modFit,testing)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
library(caret)
set.seed(1234)
rawData <- read.csv("pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)
inTrain <- createDataPartition(validData$classe, p=0.7, list=F)
training <- validData[inTrain,]
testing <- validData[-inTrain,]
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
model <- train(classe ~ ., data=training, model="rf", trControl=ctrl)
pred <- predict(model, newdata=testing)
sum(pred == testing$classe) / length(pred)
confusionMatrix(testing$classe, pred)$table
rawTestData <- read.csv("pml-testing.csv", na.strings=c("NA",""), strip.white=T)
validTestData <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
predict(model, newdata=validTestData)
varImp(model)
smallValidData <- subset(validData,
select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
smallModel <- train(classe ~ ., data=smallValidData[inTrain,], model="rf", trControl=ctrl)
predict(smallModel, newdata=validTestData)
smallPred <- predict(smallModel, newdata=testing)
sum(smallPred == testing$classe) / length(smallPred)
confusionMatrix(testing$classe, smallPred)$table
svm <- train(classe ~ ., data=smallValidData[inTrain,], model="svm", trControl=ctrl)
svmPred <- predict(svm, newdata=testing)
sum(svmPred == testing$classe) / length(svmPred)
confusionMatrix(testing$classe, svmPred)$table
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Practical Machine Learning/data")
library(caret)
set.seed(1234)
rawData <- read.csv("pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawData[, which(isNA == 0)], select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)
inTrain <- createDataPartition(validData$classe, p=0.7, list=F)
training <- validData[inTrain,]
testing <- validData[-inTrain,]
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
model <- train(classe ~ ., data=training, model="rf", trControl=ctrl)
library(caret)
set.seed(1234)
rawData <- read.csv("pml-training.csv", na.slibrary(caret)
set.seed(1234)
rawData <- read.csv("pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawData[, which(isNA == 0)], select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)trings=c("NA",""), strip.white=T)
dim(rawData)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawData[, which(isNA == 0)], select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)
inTrain <- createDataPartition(validData$classe, p=0.7, list=F)
training <- validData[inTrain,]
testing <- validData[-inTrain,]
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
model <- train(classe ~ ., data=training, model="rf", trControl=ctrl)
library(caret)
set.seed(1234)
library(caret)
set.seed(1234)
rawData <- read.csv("pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawData[, which(isNA == 0)], select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)
inTrain <- createDataPartition(validData$classe, p=0.7, list=F)
training <- validData[inTrain,]
testing <- validData[-inTrain,]
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
model <- train(classe ~ ., data=training, model="rf", trControl=ctrl)
smallValidData <- subset(validData,
select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
smallModel <- train(classe ~ ., data=smallValidData[inTrain,], model="rf", trControl=ctrl)
predict(smallModel, newdata=validTestData)
smallPred <- predict(smallModel, newdata=testing)
sum(smallPred == testing$classe) / length(smallPred)
confusionMatrix(testing$classe, smallPred)$table
validTestData <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1,
validTestData <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
smallValidData <- subset(validData,
select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
smallModel <- train(classe ~ ., data=smallValidData[inTrain,], model="rf", trControl=ctrl)
rawTestData <- read.csv("pml-testing.csv", na.strings=c("NA",""), strip.white=T)
validTestData <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1,
raw_timestamp_part_2, cvtd_timestamp))
library(caret)
set.seed(1234)
rawData <- read.csv("pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawData[, which(isNA == 0)], select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)
inTrain <- createDataPartition(validData$classe, p=0.7, list=F)
training <- validData[inTrain,]
testing <- validData[-inTrain,]
rawTestData <- read.csv("pml-testing.csv", na.strings=c("NA",""), strip.white=T)
validTestData <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
predict(model, newdata=validTestData)
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
model <- train(classe ~ ., data=training, model="rf", trControl=ctrl)
sum(pred == testing$classe) / length(pred)
confusionMatrix(testing$classe, pred)$table
rawTestData <- read.csv("pml-testing.csv", na.strings=c("NA",""), strip.white=T)
validTestData <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
predict(model, newdata=validTestData)
smallValidData <- subset(validData,
select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
smallModel <- train(classe ~ ., data=smallValidData[inTrain,], model="rf", trControl=ctrl)
library(caret)
set.seed(1234)
rawData <- read.csv("pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawData[, which(isNA == 0)], select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)
inTrain <- createDataPartition(validData$classe, p=0.7, list=F)
training <- validData[inTrain,]
testing <- validData[-inTrain,]
smallValidData <- subset(validData,
select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
smallModel <- train(classe ~ ., data=smallValidData[inTrain,], model="rf", trControl=ctrl)
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
smallValidData <- subset(validData,
select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
smallModel <- train(classe ~ ., data=smallValidData[inTrain,], model="rf", trControl=ctrl)
predict(smallModel, newdata=validTestData)
validTestData <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
predict(model, newdata=validTestData)
rawTestData <- read.csv("pml-testing.csv", na.strings=c("NA",""), strip.white=T)
validTestData <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
predict(model, newdata=validTestData)
predict(smallModel, newdata=validTestData)
library(caret)
set.seed(1234)
rawData <- read.csv("pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
isNA <- apply(rawData, 2, function(x) { sum(is.na(x)) })
validData <- subset(rawData[, which(isNA == 0)], select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(validData)
inTrain <- createDataPartition(validData$classe, p=0.7, list=F)
training <- validData[inTrain,]
testing <- validData[-inTrain,]
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
rawTestData <- read.csv("pml-testing.csv", na.strings=c("NA",""), strip.white=T)
validTestData <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
smallValidData <- subset(validData,
select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
smallModel <- train(classe ~ ., data=smallValidData[inTrain,], model="rf", trControl=ctrl)
predict(smallModel, newdata=validTestData)
smallPred <- predict(smallModel, newdata=testing)
sum(smallPred == testing$classe) / length(smallPred)
confusionMatrix(testing$classe, smallPred)$table
model <- smallModel
predict(model, newdata=validTestData)
pred <- predict(model, newdata=testing)
sum(pred == testing$classe) / length(smallPred)
confusionMatrix(testing$classe, smallPred)$table
predict(model, newdata=validTestData)
pred <- predict(model, newdata=testing)
sum(pred == testing$classe) / length(pred)
confusionMatrix(testing$classe, pred)$table
testdata <- subset(rawTestData[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
predict(model, newdata=testdata)
validdata <- subset(validData, select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
rawdata2 <- read.csv("pml-testing.csv", na.strings=c("NA",""), strip.white=T)
testdata <- subset(rawdata2[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
validdata <- subset(validData, select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
validdata <- subset(validData, select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
predict(model, newdata=testdata)
pred <- predict(model, newdata=testing)
sum(pred == testing$classe) / length(pred)
confusionMatrix(testing$classe, pred)$table
rawData <- read.csv("pml-training.csv", na.strings=c("NA",""), strip.white=T)
dim(rawData)
na <- apply(rawData, 2, function(x) { sum(is.na(x)) })
cleandata <- subset(rawData[, which(na == 0)], select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(cleandata)
inTrain <- createDataPartition(cleandata$classe, p=0.7, list=F)
training <- cleandata[inTrain,]
testing <- cleandata[-inTrain,]
ctrl <- trainControl(allowParallel=T, method="cv", number=4)
rawdata2 <- read.csv("pml-testing.csv", na.strings=c("NA",""), strip.white=T)
testdata <- subset(rawdata2[, which(isNA == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
validdata <- subset(cleandata, select=c(roll_belt, pitch_forearm, yaw_belt, magnet_dumbbell_y, pitch_belt, magnet_dumbbell_z, roll_forearm, accel_dumbbell_y, roll_dumbbell, magnet_dumbbell_x,classe))
predict(model, newdata=testdata)
pred <- predict(model, newdata=testing)
sum(pred == testing$classe) / length(pred)
confusionMatrix(testing$classe, pred)$table
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data")
library
library(shiny)
library("shiny")
install.packages("shiny")
libray(shiny)
library(shiny)
runApp()
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/first_deck")
runApp()
runApp(ui.r)
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data")
runApp(ui.r)
runApp(ui.R)
runApp(first_deck)
runApp("ui.R")
runApp("first_deck")
manipulate
runApp(display.mode='showcase')
"Value 2" = "2",
source('C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/ui.R')
library(shiny)
shinyServer(
function(input, output) {
output$oid1 <- renderPrint({input$id1})
output$oid2 <- renderPrint({input$id2})
output$odate <- renderPrint({input$date})
}
)
runApp(display.mode='showcase')
runApp()
data(iris)
data(iris)
head(iris)
table(iris$Species)
setosa <- subset(iris, Species = setosa)
setosa <- subset(iris, Species == setosa)
setosa <- subset(iris, Species = "setosa")
setosa <- subset(iris, iris$Species = "setosa")
setosa <- subset(iris, iris$Species == "setosa")
plot(iris$Sepal.Length, iris$Sepal.Width)
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/assing")
runApp()
runApp()
library(datasets)
runApp()
runApp(display.mode='showcase')
runApp()
runApp()
irisdataset <- iris
output$plot <- renderPlot({
plant <- input$spc
data <- subset(irisdataset, iris$Species == plant)
plot(data$Sepal.Length, data$Sepal.Width, main = "A plot of the Sepal size", xlab = "Sepal Length", ylab = "Sepal Width",  xaxt="n")
plant <- input$spc
data <- subset(irisdataset, iris$Species == plant)
plot(data$Sepal.Length, data$Sepal.Width, main = "A plot of the Sepal size", xlab = "Sepal Length", ylab = "Sepal Width",  xaxt="n")
spc = virginica
spc = "virginica"
plant <- input$spc
data <- subset(irisdataset, iris$Species == plant)
plot(data$Sepal.Length, data$Sepal.Width, main = "A plot of the Sepal size", xlab = "Sepal Length", ylab = "Sepal Width",  xaxt="n")
plant <- spc
data <- subset(irisdataset, iris$Species == plant)
plot(data$Sepal.Length, data$Sepal.Width, main = "A plot of the Sepal size", xlab = "Sepal Length", ylab = "Sepal Width",  xaxt="n")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
install.packages(c('ggplot2', 'shiny'))
shinyapps::setAccountInfo(name="rodrigodealexandre", token="CCB211599A461F458AB4D8D2CAB0D778", secret="e4zAssp8WScbxAgiCtte2an8NhRJbW/dfnb7b16m")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/assing")
deployApp()
deployApp()
terminateApp("assing")
terminateApp("assing")
stopApp("assing")
shinyapps::deployApp
terminateApp("assing")
terminateApp("assing")
deployApp()
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/Data Products")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/Data Products")
deployApp()
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/DataProducts")
deployApp()
---
title       : Test title
title       : Test title
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data")
author("first_deck")
library("slidify")
author("first_deck")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/first_deck")
author("first_deck")
author("petalplant")
author("petalplant")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data")
author("petalplant")
---
plant <- virginica
data <- subset(irisdataset, iris$Species == plant)
plot(data$Sepal.Length, data$Sepal.Width, main = "A plot of the Sepal size", xlab = "Sepal Length",
ylab = "Sepal Width",  xaxt="n")
data(iris)
irisdataset <- iris
plant <- virginica
data <- subset(irisdataset, iris$Species == plant)
plot(data$Sepal.Length, data$Sepal.Width, main = "A plot of the Sepal size", xlab = "Sepal Length",
ylab = "Sepal Width",  xaxt="n")
plant <- virginica
plant <- "virginica"
data <- subset(irisdataset, iris$Species == plant)
plot(data$Sepal.Length, data$Sepal.Width, main = "A plot of the Sepal size", xlab = "Sepal Length",
ylab = "Sepal Width",  xaxt="n")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/petalplant")
browseURL("index.html")
library("knitr", lib.loc="F:/Program Files/R/R-3.1.0/library")
browseURL("index.html")
setwd("C:/Users/Rodrigo/Google Drive/Coursera Courses/Developing Data Products/data/petalplant")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
